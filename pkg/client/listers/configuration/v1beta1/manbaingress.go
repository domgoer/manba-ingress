/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/domgoer/manba-ingress/pkg/apis/configuration/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManbaIngressLister helps list ManbaIngresses.
type ManbaIngressLister interface {
	// List lists all ManbaIngresses in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ManbaIngress, err error)
	// ManbaIngresses returns an object that can list and get ManbaIngresses.
	ManbaIngresses(namespace string) ManbaIngressNamespaceLister
	ManbaIngressListerExpansion
}

// manbaIngressLister implements the ManbaIngressLister interface.
type manbaIngressLister struct {
	indexer cache.Indexer
}

// NewManbaIngressLister returns a new ManbaIngressLister.
func NewManbaIngressLister(indexer cache.Indexer) ManbaIngressLister {
	return &manbaIngressLister{indexer: indexer}
}

// List lists all ManbaIngresses in the indexer.
func (s *manbaIngressLister) List(selector labels.Selector) (ret []*v1beta1.ManbaIngress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ManbaIngress))
	})
	return ret, err
}

// ManbaIngresses returns an object that can list and get ManbaIngresses.
func (s *manbaIngressLister) ManbaIngresses(namespace string) ManbaIngressNamespaceLister {
	return manbaIngressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManbaIngressNamespaceLister helps list and get ManbaIngresses.
type ManbaIngressNamespaceLister interface {
	// List lists all ManbaIngresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ManbaIngress, err error)
	// Get retrieves the ManbaIngress from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ManbaIngress, error)
	ManbaIngressNamespaceListerExpansion
}

// manbaIngressNamespaceLister implements the ManbaIngressNamespaceLister
// interface.
type manbaIngressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManbaIngresses in the indexer for a given namespace.
func (s manbaIngressNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ManbaIngress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ManbaIngress))
	})
	return ret, err
}

// Get retrieves the ManbaIngress from the indexer for a given namespace and name.
func (s manbaIngressNamespaceLister) Get(name string) (*v1beta1.ManbaIngress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("manbaingress"), name)
	}
	return obj.(*v1beta1.ManbaIngress), nil
}
